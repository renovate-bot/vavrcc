/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 7.0 */
/* JavaCCOptions:STATIC=true,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class SimpleCharStream
{
/** Whether parser is static. */
  public static final boolean staticFlag = true;
  static int bufsize;
  static int available;
  static int tokenBegin;
/** Position in buffer. */
  static public int bufpos = -1;
  private final static int CHUNK_SIZE = 2048;

  static protected java.io.Reader inputStream;

  static protected final List<char[]> buffer = new ArrayList<char[]>();
  static protected int maxNextCharInd = 0;
  static protected int inBuf = 0;
  static protected int tabSize = 1;
  static protected boolean trackLineColumn = false;

  static public void setTabSize(int i) { tabSize = i; }
  static public int getTabSize() { return tabSize; }

  private static void writeToBuffer(List<?> buf, Object newBuf, int length){
      int srcPos = 0;
      int stopChunk = length / CHUNK_SIZE;
      int remainder = length % CHUNK_SIZE;
      for (int i = 0; i < stopChunk; i++){
          System.arraycopy(newBuf, srcPos, buf.get(i), 0, CHUNK_SIZE);
          srcPos += CHUNK_SIZE;
      }
      if (remainder > 0){
          System.arraycopy(newBuf, srcPos, buf.get(stopChunk), 0, remainder);
      }
  }

  static private int readFromStream(java.io.Reader reader, int offset, int len) throws IOException {
      int totalReadChars = 0;
      int chunk = offset / CHUNK_SIZE;
      int chunkOffset = offset % CHUNK_SIZE;
      while (true){
          int charsToRead = Math.min(len, CHUNK_SIZE - chunkOffset);
          int readChars = reader.read(buffer.get(chunk), chunkOffset, charsToRead);
          totalReadChars += readChars;
          len -= readChars;
          if (readChars < charsToRead || len <= 0){
              return totalReadChars;
          }
          chunk++;
          chunkOffset=0;
      }
  }


  static protected void ExpandBuff(boolean wrapAround)
  {
    buffer.add(new char[CHUNK_SIZE]);

    try
    {
      if (wrapAround)
      {
        char[] newbuffer = new char[bufsize - tokenBegin + bufpos];
        getArray(buffer, tokenBegin, bufsize - tokenBegin, newbuffer, 0);
        getArray(buffer, 0, bufpos, newbuffer, bufsize-tokenBegin);
        writeToBuffer(buffer, newbuffer, newbuffer.length);

        maxNextCharInd = (bufpos += (bufsize - tokenBegin));
      }
      else
      {
        maxNextCharInd = (bufpos -= tokenBegin);
      }
    }
    catch (Throwable t)
    {
      throw new Error(t.getMessage());
    }


    bufsize += 2048;
    available = bufsize;
    tokenBegin = 0;
  }

  static protected void FillBuff() throws java.io.IOException
  {
    if (maxNextCharInd == available)
    {
      if (available == bufsize)
      {
        if (tokenBegin > 2048)
        {
          bufpos = maxNextCharInd = 0;
          available = tokenBegin;
        }
        else if (tokenBegin < 0)
          bufpos = maxNextCharInd = 0;
        else
          ExpandBuff(false);
      }
      else if (available > tokenBegin)
        available = bufsize;
      else if ((tokenBegin - available) < 2048)
        ExpandBuff(true);
      else
        available = tokenBegin;
    }

    int i;
    try {
      if ((i = readFromStream(inputStream,  maxNextCharInd, available - maxNextCharInd)) == -1)
      {
        inputStream.close();
        throw new java.io.IOException();
      }
      else
        maxNextCharInd += i;
      return;
    }
    catch(java.io.IOException e) {
      --bufpos;
      backup(0);
      if (tokenBegin == -1)
        tokenBegin = bufpos;
      throw e;
    }
  }

/** Start. */
  static public char BeginToken() throws java.io.IOException
  {
    tokenBegin = -1;
    char c = readChar();
    tokenBegin = bufpos;

    return c;
  }

/** Read a character. */
  static public char readChar() throws java.io.IOException
  {
    if (inBuf > 0)
    {
      --inBuf;

      if (++bufpos == bufsize)
        bufpos = 0;

      return buffer.get(bufpos/CHUNK_SIZE)[bufpos % CHUNK_SIZE];
    }

    if (++bufpos >= maxNextCharInd)
      FillBuff();

    char c = buffer.get(bufpos/CHUNK_SIZE)[bufpos % CHUNK_SIZE];

    return c;
  }

  @Deprecated
  /**
   * @deprecated
   * @see #getEndColumn
   */

  static public int getColumn() {
    return -1;
  }

  @Deprecated
  /**
   * @deprecated
   * @see #getEndLine
   */

  static public int getLine() {
    return -1;
  }

  /** Get token end column number. */
  static public int getEndColumn() {
    return -1;
  }

  /** Get token end line number. */
  static public int getEndLine() {
    return -1;
  }

  /** Get token beginning column number. */
  static public int getBeginColumn() {
    return -1;
  }

  /** Get token beginning line number. */
  static public int getBeginLine() {
    return -1;
  }

/** Backup a number of characters. */
  static public void backup(int amount) {

    inBuf += amount;
    if ((bufpos -= amount) < 0)
      bufpos += bufsize;
  }

  /** Constructor. */
  public SimpleCharStream(java.io.Reader dstream, int startline,
  int startcolumn, int buffersize)
  {
    if (inputStream != null)
      throw new Error("\n   ERROR: Second call to the constructor of a static SimpleCharStream.\n" +
      "       You must either use ReInit() or set the JavaCC option STATIC to false\n" +
      "       during the generation of this class.");
    inputStream = dstream;

    int chunksNeeded = (buffersize + CHUNK_SIZE - 1) / CHUNK_SIZE;
    available = bufsize = chunksNeeded * CHUNK_SIZE;
    for (int i = 0; i < chunksNeeded; i++){
      buffer.add(new char[CHUNK_SIZE]);
    }
  }

  /** Constructor. */
  public SimpleCharStream(java.io.Reader dstream, int startline,
                          int startcolumn)
  {
    this(dstream, startline, startcolumn, 4096);
  }

  /** Constructor. */
  public SimpleCharStream(java.io.Reader dstream)
  {
    this(dstream, 1, 1, 4096);
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader dstream, int startline,
  int startcolumn, int buffersize)
  {
    inputStream = dstream;
    int chunksNeeded = (buffersize + CHUNK_SIZE - 1) / CHUNK_SIZE;
    available = bufsize = chunksNeeded * CHUNK_SIZE;
    for (int i = buffer.size(); i < chunksNeeded; i++){
      buffer.add(new char[CHUNK_SIZE]);
    }

    tokenBegin = inBuf = maxNextCharInd = 0;
    bufpos = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader dstream, int startline,
                     int startcolumn)
  {
    ReInit(dstream, startline, startcolumn, 4096);
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader dstream)
  {
    ReInit(dstream, 1, 1, 4096);
  }
  /** Constructor. */
  public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline,
  int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException
  {
    this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
  }

  /** Constructor. */
  public SimpleCharStream(java.io.InputStream dstream, int startline,
  int startcolumn, int buffersize)
  {
    this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
  }

  /** Constructor. */
  public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline,
                          int startcolumn) throws java.io.UnsupportedEncodingException
  {
    this(dstream, encoding, startline, startcolumn, 4096);
  }

  /** Constructor. */
  public SimpleCharStream(java.io.InputStream dstream, int startline,
                          int startcolumn)
  {
    this(dstream, startline, startcolumn, 4096);
  }

  /** Constructor. */
  public SimpleCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException
  {
    this(dstream, encoding, 1, 1, 4096);
  }

  /** Constructor. */
  public SimpleCharStream(java.io.InputStream dstream)
  {
    this(dstream, 1, 1, 4096);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream dstream, String encoding, int startline,
                          int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException
  {
    ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream dstream, int startline,
                          int startcolumn, int buffersize)
  {
    ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException
  {
    ReInit(dstream, encoding, 1, 1, 4096);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream dstream)
  {
    ReInit(dstream, 1, 1, 4096);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream dstream, String encoding, int startline,
                     int startcolumn) throws java.io.UnsupportedEncodingException
  {
    ReInit(dstream, encoding, startline, startcolumn, 4096);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream dstream, int startline,
                     int startcolumn)
  {
    ReInit(dstream, startline, startcolumn, 4096);
  }
  /** Copy chunked buffer to array*/
  private static void getArray(List<?> buf,
                        int offset,
                        int count,
                        Object dest,
                        int destOffset){
      int startChunk = offset / CHUNK_SIZE;
      int startColumn = offset % CHUNK_SIZE;
      int stopChunk = (offset + count) / CHUNK_SIZE;
      int stopColumn = (offset + count) % CHUNK_SIZE;
      for (int i = startChunk; i < stopChunk; i++){
          int span = CHUNK_SIZE - startColumn;
          System.arraycopy(buf.get(i), startColumn, dest, destOffset, span);
          startColumn = 0;
          destOffset += span;
      }
      if (stopColumn > 0) {
          System.arraycopy(buf.get(stopChunk), startColumn,
                  dest, destOffset, stopColumn-startColumn);
      }
  }
  /** Get token literal value. */
  static public String GetImage()
  {
    if (bufpos >= tokenBegin) {
        char[] buf = new char[bufpos - tokenBegin + 1];
        getArray(buffer, tokenBegin, bufpos - tokenBegin + 1, buf, 0);
        return new String(buf);
    } else {
        char[] buf = new char[bufsize - tokenBegin + bufpos + 1];
        getArray(buffer, tokenBegin, bufsize - tokenBegin, buf, 0);
        getArray(buffer, 0, bufpos + 1, buf, bufsize - tokenBegin);
        return new String(buf);
    }
  }

  /** Get the suffix. */
  static public char[] GetSuffix(int len)
  {
    char[] ret = new char[len];

    if ((bufpos + 1) >= len) {
        getArray(buffer, bufpos - len + 1, len, ret, 0);
    } else {
        getArray(buffer, bufsize - (len - bufpos - 1), len - bufpos - 1, ret, 0);
        getArray(buffer, 0, bufpos + 1, ret, len - bufpos - 1);
    }

    return ret;
  }

  /** Reset buffer when finished. */
  static public void Done()
  {
    buffer.clear();
  }
}
/* JavaCC - OriginalChecksum=38b040da1b6917d5731ebebac75cc48a (do not edit this line) */
